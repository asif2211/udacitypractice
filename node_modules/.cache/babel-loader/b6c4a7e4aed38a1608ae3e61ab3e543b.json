{"ast":null,"code":"import action from './action';\n\nconst Todo = (state, action) => {\n  switch (action.type) {\n    case 'ADD-TODO':\n      return state.concat(action.todo);\n\n    case 'REMOVE-TODO':\n      return state.filter(todo => todo.id !== action.id);\n\n    case 'TOGGLE-TODO':\n      return state.map(todo => todo.id !== action.id ? todo : Object.assign({}, todo, {\n        complete: !todo.complete\n      }));\n\n    default:\n      return state;\n  }\n};\n\n_c = Todo;\n\nconst Goals = (state, action) => {\n  switch (action.type) {\n    case 'ADD-GOLS':\n      return state.concat(action.todo);\n\n    case 'REMOVE-GOLS':\n      return state.filter(todo => todo.id !== action.id);\n\n    default:\n      return state;\n  }\n};\n\n_c2 = Goals;\n\nconst createStore = reducer => {\n  // The store should have four parts\n  // 1. The state\n  // 2. Get the state.\n  // 3. Listen to changes on the state.\n  // 4. Update the state\n  //part 1\n  let state;\n  let listeners = []; // Part 2,  \n\n  const getState = () => state;\n\n  const subscribe = listener => {\n    // part 3 \n    listeners.push(listener);\n    return () => {\n      listeners = listeners.filter(l => l !== listener);\n    };\n  }; //part 4  \n\n\n  const dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  return {\n    getState,\n    subscribe,\n    dispatch\n  };\n}; // part 4\n// reducer pass to the store and it contains 3 method \n// state, subscribe method, and dispatch.\n\n\nconst App = createStore(Todo);\n_c3 = App;\nApp.subscribe(() => {\n  console.log('The new state is: ', App.getState());\n});\nApp.dispatch({\n  type: 'ADD_TODO',\n  todo: {\n    id: 0,\n    name: 'Learn Redux',\n    complete: false\n  }\n});\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Todo\");\n$RefreshReg$(_c2, \"Goals\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/muhammadasif/udacitypractice/src/App.js"],"names":["action","Todo","state","type","concat","todo","filter","id","map","Object","assign","complete","Goals","createStore","reducer","listeners","getState","subscribe","listener","push","l","dispatch","forEach","App","console","log","name"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAQF,MAAR,KAAmB;AAC9B,UAAOA,MAAM,CAACG,IAAd;AACE,SAAM,UAAN;AACE,aAAOD,KAAK,CAACE,MAAN,CAAaJ,MAAM,CAACK,IAApB,CAAP;;AACF,SAAM,aAAN;AACE,aAAOH,KAAK,CAACI,MAAN,CAAaD,IAAI,IAAGA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACO,EAAvC,CAAP;;AACF,SAAM,aAAN;AACA,aAAOL,KAAK,CAACM,GAAN,CAAUH,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACO,EAAnB,GAAwBF,IAAxB,GAA+BI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBL,IAAjB,EAAsB;AAACM,QAAAA,QAAQ,EAAE,CAACN,IAAI,CAACM;AAAjB,OAAtB,CAAjD,CAAP;;AACA;AACA,aAAOT,KAAP;AARF;AAUD,CAXD;;KAAMD,I;;AAYN,MAAMW,KAAK,GAAG,CAACV,KAAD,EAAQF,MAAR,KAAmB;AACjC,UAAOA,MAAM,CAACG,IAAd;AACE,SAAM,UAAN;AACE,aAAOD,KAAK,CAACE,MAAN,CAAaJ,MAAM,CAACK,IAApB,CAAP;;AACF,SAAM,aAAN;AACE,aAAOH,KAAK,CAACI,MAAN,CAAaD,IAAI,IAAGA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACO,EAAvC,CAAP;;AACF;AACE,aAAOL,KAAP;AANJ;AAQC,CATD;;MAAMU,K;;AAUN,MAAMC,WAAW,GAAIC,OAAD,IAAY;AAC9B;AACA;AACA;AACA;AACA;AACE;AACA,MAAIZ,KAAJ;AACA,MAAIa,SAAS,GAAG,EAAhB,CAR4B,CAS5B;;AACA,QAAMC,QAAQ,GAAG,MAAMd,KAAvB;;AACA,QAAMe,SAAS,GAAIC,QAAD,IAClB;AACE;AACAH,IAAAA,SAAS,CAACI,IAAV,CAAeD,QAAf;AACA,WAAO,MAAM;AACXH,MAAAA,SAAS,GAAGA,SAAS,CAACT,MAAV,CAAkBc,CAAD,IAAOA,CAAC,KAAKF,QAA9B,CAAZ;AACD,KAFD;AAGD,GAPD,CAX4B,CAoB5B;;;AACA,QAAMG,QAAQ,GAAIrB,MAAD,IAAY;AAC3BE,IAAAA,KAAK,GAAGY,OAAO,CAACZ,KAAD,EAAQF,MAAR,CAAf;AACAe,IAAAA,SAAS,CAACO,OAAV,CAAmBJ,QAAD,IAAcA,QAAQ,EAAxC;AACD,GAHD;;AAIF,SAAO;AACLF,IAAAA,QADK;AAELC,IAAAA,SAFK;AAGLI,IAAAA;AAHK,GAAP;AAMD,CA/BD,C,CAgCA;AACA;AACA;;;AACA,MAAME,GAAG,GAAGV,WAAW,CAACZ,IAAD,CAAvB;MAAMsB,G;AAENA,GAAG,CAACN,SAAJ,CAAc,MAAM;AAClBO,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,GAAG,CAACP,QAAJ,EAAlC;AACD,CAFD;AAIAO,GAAG,CAACF,QAAJ,CAAa;AACXlB,EAAAA,IAAI,EAAE,UADK;AAEXE,EAAAA,IAAI,EAAE;AACJE,IAAAA,EAAE,EAAE,CADA;AAEJmB,IAAAA,IAAI,EAAE,aAFF;AAGJf,IAAAA,QAAQ,EAAE;AAHN;AAFK,CAAb;AAUA,eAAeY,GAAf","sourcesContent":["\nimport action from './action';\nconst Todo = (state, action) => {\n  switch(action.type){\n    case  'ADD-TODO' :\n      return state.concat(action.todo)\n    case  'REMOVE-TODO' :\n      return state.filter(todo=> todo.id !== action.id)\n    case  'TOGGLE-TODO' :\n    return state.map(todo => todo.id !== action.id ? todo : Object.assign({},todo,{complete :!todo.complete}))\n    default :\n    return state;\n  }\n}\nconst Goals = (state, action) => {\nswitch(action.type){\n  case  'ADD-GOLS' :\n    return state.concat(action.todo)\n  case  'REMOVE-GOLS' :\n    return state.filter(todo=> todo.id !== action.id)\n  default :\n    return state;\n}\n}\nconst createStore = (reducer) =>{\n  // The store should have four parts\n  // 1. The state\n  // 2. Get the state.\n  // 3. Listen to changes on the state.\n  // 4. Update the state\n    //part 1\n    let state;\n    let listeners = [];\n    // Part 2,  \n    const getState = () => state\n    const subscribe = (listener) => \n    {\n      // part 3 \n      listeners.push(listener)\n      return () => {\n        listeners = listeners.filter((l) => l !== listener)\n      }\n    } \n\n    //part 4  \n    const dispatch = (action) => {\n      state = reducer(state, action)\n      listeners.forEach((listener) => listener())\n    }\n  return {\n    getState,\n    subscribe,\n    dispatch,\n  }\n\n}\n// part 4\n// reducer pass to the store and it contains 3 method \n// state, subscribe method, and dispatch.\nconst App = createStore(Todo)\n\nApp.subscribe(() => {\n  console.log('The new state is: ', App.getState())\n})\n\nApp.dispatch({\n  type: 'ADD_TODO',\n  todo: {\n    id: 0,\n    name: 'Learn Redux',\n    complete: false\n  }\n\n})\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}