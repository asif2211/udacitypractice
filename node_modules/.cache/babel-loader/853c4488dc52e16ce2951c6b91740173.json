{"ast":null,"code":"const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD-TODO':\n      return state.concat(action.todo);\n\n    case 'REMOVE-TODO':\n      return state.filter(todo => todo.id !== action.id);\n\n    case 'TOGGLE-TODO':\n      return state.map(todo => todo.id !== action.id ? todo : Object.assign({}, todo, {\n        complete: !todo.complete\n      }));\n\n    default:\n      return state;\n  }\n};\n\nconst goals = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD-GOLS':\n      return state.concat(action.todo);\n\n    case 'REMOVE-GOLS':\n      return state.filter(todo => todo.id !== action.id);\n\n    default:\n      return state;\n  }\n};\n\nconst createStore = reducer => {\n  // The store should have four parts\n  // 1. The state\n  // 2. Get the state.\n  // 3. Listen to changes on the state.\n  // 4. Update the state\n  //part 1\n  let state;\n  let listeners = []; // Part 2,  \n\n  const getState = () => state;\n\n  const subscribe = listener => {\n    // part 3 \n    listeners.push(listener);\n    return () => {\n      listeners = listeners.filter(l => l !== listener);\n    };\n  }; //part 4  \n\n\n  const dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  return {\n    getState,\n    subscribe,\n    dispatch\n  };\n}; // In order to manage multiple reducers we create a function\n// that passed todos and goals that manange the same\n// state that updated when action is dispatched.\n\n\nconst App = (state, action) => {\n  todos: todos(state.todos, action);\n\n  goals: goals(state.goals, action);\n}; // part 4\n// reducer pass to the store and it contains 3 method \n// state, subscribe method, and dispatch.\n\n\n_c = App;\nconst store = createStore(App);\nstore.subscribe(() => {\n  console.log('The new state is: ', store.getState());\n});\nstore.dispatch({\n  type: 'ADD_TODO',\n  todo: {\n    id: 0,\n    name: 'Learn Redux',\n    complete: false\n  }\n});\nexport default createStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/muhammadasif/udacitypractice/src/App.js"],"names":["todos","state","action","type","concat","todo","filter","id","map","Object","assign","complete","goals","createStore","reducer","listeners","getState","subscribe","listener","push","l","dispatch","forEach","App","store","console","log","name"],"mappings":"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","sourcesContent":["\n\nconst todos = (state = [], action) => {\n  switch(action.type){\n    case  'ADD-TODO' :\n      return state.concat(action.todo)\n    case  'REMOVE-TODO' :\n      return state.filter(todo=> todo.id !== action.id)\n    case  'TOGGLE-TODO' :\n    return state.map(todo => todo.id !== action.id ? todo : Object.assign({},todo,{complete :!todo.complete}))\n    default :\n    return state;\n  }\n}\nconst goals = (state = [], action) => {\nswitch(action.type){\n  case  'ADD-GOLS' :\n    return state.concat(action.todo)\n  case  'REMOVE-GOLS' :\n    return state.filter(todo=> todo.id !== action.id)\n  default :\n    return state;\n}\n}\nconst createStore = (reducer) =>{\n  // The store should have four parts\n  // 1. The state\n  // 2. Get the state.\n  // 3. Listen to changes on the state.\n  // 4. Update the state\n    //part 1\n    let state;\n    let listeners = [];\n    // Part 2,  \n    const getState = () => state\n    const subscribe = (listener) => \n    {\n      // part 3 \n      listeners.push(listener)\n      return () => {\n        listeners = listeners.filter((l) => l !== listener)\n      }\n    } \n\n    //part 4  \n    const dispatch = (action) => {\n      state = reducer(state, action)\n      listeners.forEach((listener) => listener())\n    }\n  return {\n    getState,\n    subscribe,\n    dispatch,\n  }\n\n}\n// In order to manage multiple reducers we create a function\n// that passed todos and goals that manange the same\n// state that updated when action is dispatched.\nconst App = (state, action) =>{\n  todos :todos(state.todos,action)\n  goals:goals(state.goals,action)\n}\n// part 4\n// reducer pass to the store and it contains 3 method \n// state, subscribe method, and dispatch.\nconst store = createStore(App)\n\nstore.subscribe(() => {\n  console.log('The new state is: ', store.getState())\n})\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  todo: {\n    id: 0,\n    name: 'Learn Redux',\n    complete: false\n  }\n\n})\n\nexport default createStore;\n"]},"metadata":{},"sourceType":"module"}